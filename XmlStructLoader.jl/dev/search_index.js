var documenterSearchIndex = {"docs":
[{"location":"#XmlStructLoaderExampleXml","page":"Home","title":"XmlStructLoaderExampleXml","text":"","category":"section"},{"location":"#Getting-the-required-files","page":"Home","title":"Getting the required files","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to get the required *.jl files follow the instructions of XsdToStruct.","category":"page"},{"location":"#Loading-an-XML-into-a-Julia-struct","page":"Home","title":"Loading an XML into a Julia struct","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In this example we load an ExampleXml. If we put the created *.jl files generated by XsdToStruct in the folder \"XsdModules/ExampleXml\". We can load the ExampleXml in a few ways:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using XmlStructLoader\n\nxsd_module_path = joinpath(\"XsdModules\", \"ExampleXml\", \"ExampleXml.jl\")\nxml_path = joinpath(\"path\", \"to\", \"ExampleXml.xml\")\n\ninclude(xsd_module_path)\nusing .ExampleXml\n\nexample_xml = load(xml_path, ExampleXml)","category":"page"},{"location":"","page":"Home","title":"Home","text":"or","category":"page"},{"location":"","page":"Home","title":"Home","text":"using XmlStructLoader\n\nxsd_module_dir = joinpath(\"XsdModules\", \"ExampleXml\")  # can also be the module path\nxml_path = joinpath(\"path\", \"to\", \"ExampleXml.xml\")\n\nmodule_reference = use_module_from_xml(xml_path, xsd_module_dir)\n\nexample_xml = load(xml_path, module_reference)","category":"page"},{"location":"","page":"Home","title":"Home","text":"or","category":"page"},{"location":"","page":"Home","title":"Home","text":"using XmlStructLoader\n\nxsd_module_dir = joinpath(\"XsdModules\", \"ExampleXml\")  # can also be the module path\nxml_path = joinpath(\"path\", \"to\", \"ExampleXml.xml\")\n\nexample_xml = load(xml_path, xsd_module_dir)","category":"page"},{"location":"#Validating-the-*.xml-file","page":"Home","title":"Validating the *.xml file","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"By default the load function will validate the input xml with respect to the restrictions specified in the xsd from which the xsd module was generated. To disable this validation pass the keyword argument validate=false to the load function.","category":"page"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [XmlStructLoader]","category":"page"},{"location":"docstrings/#XmlStructLoader.get_base_field_type-Tuple{Type, Int64}","page":"Docstrings","title":"XmlStructLoader.get_base_field_type","text":"get_field_type(::Type{T}, field_specification::Union{Symbol, Int}) where T <: Any\n\nFor a given type T return the type of the field determined by either the index or symbol field_specification. If the type is a Union return the first type different from Nothing. This is intended to handle types of the pattern Union{Nothing, S} which is intended to represent optional types.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#XmlStructLoader.getattributes_dict-Tuple{EzXML.Node}","page":"Docstrings","title":"XmlStructLoader.getattributes_dict","text":"getattributes_dict(x::XMLElement)\n\nFaster version of EzXML.attributes_dict()\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#XmlStructLoader.import_module_from_xml-Tuple{AbstractString, AbstractString}","page":"Docstrings","title":"XmlStructLoader.import_module_from_xml","text":"import_module_from_xml(xml_path::AbstractString, module_path::AbstractString)::Module\n\nImport the module from the .jl files in the module_path and return a reference to this module. This reference can be passed into the load function.\n\nExamples\n\njulia> using XmlStructLoader\njulia> module_ref = import_module_from_xml(path/to/xml/file.xml, path/to/module/module.jl)\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#XmlStructLoader.load-Tuple{AbstractString, AbstractString}","page":"Docstrings","title":"XmlStructLoader.load","text":"load(xml_path::AbstractString, module_path::AbstractString; validate::Bool=true)\n\nLoad the given XML file into the structs defined in the given module and return the loaded struct. The module has to be generated by XsdToStruct.jl. By default the loader will validate if the data in the given XML conforms to the restrictions specified in the XSD. To skip this validation the keyword argument validate can be set to false.\n\nExamples\n\njulia> using XmlStructLoader\njulia> load(joinpath(\"path\", \"to\", \"xml\", \"file.xml\"), joinpath(\"path\", \"to\", \"xsd\", \"module.jl\"))\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#XmlStructLoader.load-Tuple{AbstractString, Module}","page":"Docstrings","title":"XmlStructLoader.load","text":"load(xml_path::AbstractString, module_ref::Module; validate::Bool=true)\n\nLoad the given XML file into the structs defined in the given module and return the loaded struct. The module has to be generated by XsdToStruct.jl. By default the loader will validate if the data in the given XML conforms to the restrictions specified in the XSD. To skip this validation the keyword argument validate` can be set to false.\n\nExamples\n\njulia> using XmlStructLoader\njulia> include(joinpath(\"path\", \"to\", \"xsd\", \"module.jl\"))\njulia> using .XsdModule\njulia> load(joinpath(\"path\", \"to\", \"xml\", \"file.xml\"), XsdModule)\n\nor:\n\njulia> using XmlStructLoader\njulia> include(joinpath(\"path\", \"to\", \"xsd\", \"module.jl\"))\njulia> import .XsdModule\njulia> load(joinpath(\"path\", \"to\", \"xml\", \"file.xml\"), XsdModule)\n\nor to skip validation:\n\njulia> using XmlStructLoader\njulia> include(joinpath(\"path\", \"to\", \"xsd\", \"module.jl\"))\njulia> using .XsdModule\njulia> load(joinpath(\"path\", \"to\", \"xml\", \"file.xml\"), XsdModule, validate=false)\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#XmlStructLoader.type_in_module-Tuple{Type, Module}","page":"Docstrings","title":"XmlStructLoader.type_in_module","text":"(type_in_module(::Type{T}, module_ref::Module)::Bool) where T <: Any\n\nDetermine if given type T is defined in the module specified by module_symbol.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#XmlStructLoader.type_in_module-Union{Tuple{T}, Tuple{Type{T}, Module}} where T<:Dates.AbstractTime","page":"Docstrings","title":"XmlStructLoader.type_in_module","text":"type_in_module(::Type{ZonedDateTime}, ::Module)\n\nHandles special edge case that should always return false.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#XmlStructLoader.use_module_from_xml-Tuple{AbstractString, AbstractString}","page":"Docstrings","title":"XmlStructLoader.use_module_from_xml","text":"use_module_from_xml(xml_path::AbstractString, module_path::AbstractString)::Module\n\nUse the module from the .jl files in the module_path and return a reference to this module. This reference can be passed into the load function.\n\nExamples\n\njulia> using XmlStructLoader\njulia> module_ref = use_module_from_xml(path/to/xml/file.xml, path/to/module/module.jl)\n\n\n\n\n\n","category":"method"}]
}
